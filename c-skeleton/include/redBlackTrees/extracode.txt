//Node *InitializeNodeBSTInsertion(Node *newNode, int value)
//{
//
//    // Add value to node
//    newNode->value = value;
//    return newNode;
//}
//
//int compareTwoIntegers(int firstNumber, int secondNumber)
//{
//    if(firstNumber < secondNumber){
//
//        return -1;
//    }
//    else if(firstNumber > secondNumber){
//
//        return 0;
//    }
//    else {
//
//        return 1;
//    }
//}
//
//Node *insertNode(Node *treeRootNode, int value)
//{
//    Node *temp = NULL;
//    Node *parent = NULL;
//    Node *p = NULL;
//    if(treeRootNode == NULL)
//    {
//        temp = createNode();
//        temp = InitializeNodeBSTInsertion(temp, value);
//
//        temp->color = BLACK;
//
//        treeRootNode = temp;
//        return treeRootNode;
//    }
//
//    p = treeRootNode;
//    parent = NULL;
//
//    while (p!= NULL)
//    {
//        parent = p;
//        if( value < p->value)
//        {
//            p = p->left;
//        }
//        else if(value > p->value)
//        {
//            p = p->right;
//        }
//        else
//        {
//            printf("%d already present in the tree\n", value);
//            return treeRootNode;
//        }
//    }
//    temp = createNode();
//    temp = InitializeNodeBSTInsertion(temp, value);
//
//    if(parent == NULL)
//    {
//        treeRootNode =temp;
//    }
//    else if(value < parent->value)
//    {
//        parent->left = temp;
//    }
//    else
//    {
//        parent->right = temp;
//    }
//    return treeRootNode;
//}
//
//
//
//RedBlackTree *getMainRedBlackTree()
//{
//    return mainRedBlackTree;
//}
//
//void flipColors(Node *node)
//{
//    node->color = RED;
//    node->left = NULL;
//    node->right = NULL;
//}
//
//
//// The function Balances the Red Black Tree after inserting a node
//// Need to check the red-black properties
//void insertFixUp()
//{
//    // Need to check the red-black properties
//
//}
//
//void printTreeValue(int value)
//{
//    printf("%d\n", value);
//}
//
//void printNode(Node *root)
//{
//    if(root != NULL)
//    {
//        printNode(root->left);
//        printTreeValue(root->color);
//        printTreeValue(root->value);
//        printNode(root->right);
//    }
//}
//
//int height(Node *mainRedBlackTree)
//{
//    if(!mainRedBlackTree)
//    {
//        return 0;
//    }
//    if(!mainRedBlackTree->left && !mainRedBlackTree->right)
//    {
//        return 1;
//    }
//
//    int lheight = height(mainRedBlackTree->left);
//    int rheight = height(mainRedBlackTree->right);
//    return MAX(lheight, rheight) + 1;
//}
//
//void printTreeLevel(Node *mainRedBlackTree)
//{
//    int i = 0;
//    int treeHeight = height(mainRedBlackTree);
//
//    for(i = 1; i <= treeHeight; i++)
//    {
//        printf("Level %d : ", i);
//        printTreeLevelOrder(mainRedBlackTree, i);
//        printf("\n");
//    }
//}
//
//void printTreeLevelOrder(Node *mainRedBlackTree, int level)
//{
//    if(!mainRedBlackTree)
//    {
//        return;
//    }
//    if(level == 1)
//    {
//        printf("%d %d", mainRedBlackTree->value, mainRedBlackTree->color);
//    }
//
//    printTreeLevelOrder(mainRedBlackTree->left, level-1);
//    printTreeLevelOrder(mainRedBlackTree->right, level-1);
//}
//
//void printRedBlackTree(Node *mainRedBlackTree)
//{
//
//    int space = 0;
//
//    if(mainRedBlackTree == NULL)
//    {
//        printf("<Tree Empty>");
//        return;
//    }
//
//    if(mainRedBlackTree->right != NULL)
//    {
//
//        printRedBlackTree(mainRedBlackTree->right);
//        space++;
//
//    }
//
//    if(mainRedBlackTree->color == 0)
//    {
//
//        printf("Node Color is %d with value %d\n", mainRedBlackTree->color, mainRedBlackTree->value);
//
//    }
//
//    else
//    {
//
//        printf("Node Color is %d with value %d\n", mainRedBlackTree->color, mainRedBlackTree->value);
//
//    }
//}
//
//
/////////////////////////////
//
////// This function creates a RedBlackTree from the RedBlackTree passed int
////// Returns a fully initialized RedBlackTree that is ready to be used
//
//
////Node *initializeRBT(Node *headRoot)
////{
////
////    // It maintree NULL, create a black node and insert it
////    if(headRoot == NULL)
////    {
////
////        // Malloc Space for black node
////        headRoot = (Node *)malloc(sizeof(Node));
////
////        // Value of Tree Root
////        headRoot->color = BLACK;
////        headRoot->value = 0;
////
////    }
////
////    // Add treeRootNode to Tree
////    newRedBlackTree = (RedBlackTree *)malloc(sizeof(RedBlackTree));
////    newRedBlackTree->head = headRoot;
////
////    return mainRedBlackTree;
////}
//    // Got here the compare Result is greater than 0
//    // Need to go right
////    if (treeRootNode->right == NULL) {
////        treeRootNode->right = temp;
////    } else {
////        // Move to the next NULL position on the Right side
////        temp = treeRootNode->right;
////    }
////    break;
////
////
////} else if (numberResultFromCompare == -1) {
////
////// Check if the position is NULL
////if (treeRootNode->left == NULL) {
////// If position is null insert the Node
////treeRootNode->left = temp;
////break;
////
////} else {
////// Move to the next NULL position
////treeRootNode = treeRootNode->left;
////break;
////}
////} else {
////
////// Check if the value == treeRootNode->value
////printf("Duplicate value\n");
////return insertNode;
////}
////Node *insert(Node *insertNode, int value)
////{
////    int numberResultFromCompare = 0;
////
////    Node *temp = NULL;
////    Node *treeRootNode = NULL;
////
////    temp = (Node *)malloc(sizeof(Node));
////    temp->left = (Node *)malloc(sizeof(Node));
////    temp->right = (Node *)malloc(sizeof(Node));
////    temp->parent = (Node *)malloc(sizeof(Node));
////
////    treeRootNode = (Node *)malloc(sizeof(Node));
////    treeRootNode->left = (Node *)malloc(sizeof(Node));
////    treeRootNode->right = (Node *)malloc(sizeof(Node));
////    treeRootNode->parent = (Node *)malloc(sizeof(Node));
////
////    insertNode = (Node *)malloc(sizeof(Node));
////    insertNode->left = (Node *)malloc(sizeof(Node));
////    insertNode->right = (Node *)malloc(sizeof(Node));
////    insertNode->parent = (Node *)malloc(sizeof(Node));
////
////    // Check if Tree is Empty
////    if(mainRedBlackTree == NULL)
////    {
////
////        // Add value to header node
////        insertNode = InitializeNodeBSTInsertion(insertNode, value);
////
////        // Change color from Red to Black
////        insertNode->color = BLACK;
////
////        // Malloc Space for RedBlackTree
////        mainRedBlackTree = (RedBlackTree *)malloc(sizeof(RedBlackTree));
////
////        // Malloc Space for the Pointer inside the RedBlackTree
////        mainRedBlackTree->root = (Node *)malloc(sizeof(Node));
////
////        // Insert the Node in the root position of the RedBlackTree
////        mainRedBlackTree->root = insertNode;
////
////    } else {
////
////        //If I get here the Root node is not empty and node need to be inserted
////        // Go to the RedAndBlack and get the Root Node
////
////
////        treeRootNode = mainRedBlackTree->root;
////
////
////        // Load 23 into insertNode
////        temp = createNode();
////        insertNode = InitializeNodeBSTInsertion(temp, value);
////
////        while(1) {
////            // Compare the value passed in to the value in the Tree
////            numberResultFromCompare = compareTwoIntegers(temp->value, treeRootNode->value);
////
////            if (numberResultFromCompare == -1) {
////
////                treeRootNode->value = value;
////                return temp;
////            }
////            else if (numberResultFromCompare == 0)
////            {
////                if(treeRootNode->left == NULL)
////                {
////                    treeRootNode->left = temp;
////                    break;
////                }
////                else
////                {
////                    treeRootNode = treeRootNode->left;
////                }
////            }
////            else
////            {
////                if(treeRootNode->right == NULL)
////                {
////                    treeRootNode->right = temp;
////                    break;
////                }
////                else
////                {
////                    treeRootNode = treeRootNode->right;
////
////                }
////
////            }
////
////        }
////
////        temp->parent = treeRootNode;
////    }
////
////    return treeRootNode;
////}
////Node *InitializeNodeBSTInsertion(Node *newNode, int value)
////{
////
////    // Add value to node
////    newNode->value = value;
////    return newNode;
////}
////
////int compareTwoIntegers(int firstNumber, int secondNumber)
////{
////    if(firstNumber < secondNumber){
////
////        return -1;
////    }
////    else if(firstNumber > secondNumber){
////
////        return 0;
////    }
////    else {
////
////        return 1;
////    }
////}
////
////RedBlackTree *getMainRedBlackTree()
////{
////    return mainRedBlackTree;
////}
////
////
////// The function Balances the Red Black Tree after inserting a node
////// Need to check the red-black properties
////void insertFixUp()
////{
////    // Need to check the red-black properties
////
////}
////void printTreeLevel(Node *mainRedBlackTree)
////{
////    int i = 0;
////    int treeHeight = height(mainRedBlackTree);
////
////    for(i = 1; i <= treeHeight; i++)
////    {
////        printf("Level %d : ", i);
////        printTreeLevelOrder(mainRedBlackTree, i);
////        printf("\n");
////    }
////}
////
////void printTreeLevelOrder(Node *mainRedBlackTree, int level)
////{
////    if(!mainRedBlackTree)
////    {
////        return;
////    }
////    if(level == 1)
////    {
////        printf("%d %d", mainRedBlackTree->value, mainRedBlackTree->color);
////    }
////
////    printTreeLevelOrder(mainRedBlackTree->left, level-1);
////    printTreeLevelOrder(mainRedBlackTree->right, level-1);
////}
////
////void printRedBlackTree(Node *mainRedBlackTree)
////{
////
////    int space = 0;
////
////    if(mainRedBlackTree == NULL)
////    {
////        printf("<Tree Empty>");
////        return;
////    }
////
////    if(mainRedBlackTree->right != NULL)
////    {
////
////        printRedBlackTree(mainRedBlackTree->right);
////        space++;
////
////    }
////
////    if(mainRedBlackTree->color == 0)
////    {
////
////        printf("Node Color is %d with value %d\n", mainRedBlackTree->color, mainRedBlackTree->value);
////
////    }
////
////    else
////    {
////
////        printf("Node Color is %d with value %d\n", mainRedBlackTree->color, mainRedBlackTree->value);
////
////    }
////}
////int height(Node *mainRedBlackTree)
//{
//    if(!mainRedBlackTree)
//    {
//        return 0;
//    }
//    if(!mainRedBlackTree->left && !mainRedBlackTree->right)
//    {
//        return 1;
//    }
//
//    int lheight = height(mainRedBlackTree->left);
//    int rheight = height(mainRedBlackTree->right);
//    return MAX(lheight, rheight) + 1;
//}
//void printNode(Node *root)
//{
//
////    Node *mainRoot = NULL;
////    mainRoot = (Node *)malloc(sizeof(Node));
////    mainRoot = root;
//
//    if(root != NULL)
//    {
//        if(root->grandParent != NULL){
//            printTreeValue(root->grandParent->color);
//            printTreeValue(root->grandParent->value);
//        }
//        else if(root->parent != NULL){
//            printTreeValue(root->parent->color);
//            printTreeValue(root->parent->value);
//        }
//        else if(root->uncle != NULL){
//            printTreeValue(root->uncle->color);
//            printTreeValue(root->uncle->value);
//        }
//        else if(root->insertNode != NULL) {
//            printTreeValue(root->insertNode->color);
//            printTreeValue(root->insertNode->value);
//        }
////        printNode(root->grandParent);
////        printNode(root->parent);
////        printTreeValue(root->color);
////        printTreeValue(root->value);
////        printNode(root->uncle);
////        printNode(root->insertNode);
////        free()
//    }
//Node *grandParent(Node * root)
//{
//    if ((root != NULL) && (root->parent != NULL))
//    {
//        return root->parent->parent;
//
//    }
//    else
//    {
//        return root->grandParent;
//    }
////}
//Node *uncle(Node *root)
//{
//    Node *grandParentNode = grandParent(root);
//
//    if (grandParentNode == NULL)
//    {
//
//        return NULL;
//    }
//    else if (root->parent == grandParentNode->uncle)
//    {
//        printf("Return grandParent->uncle\n");
//        return grandParentNode->uncle;
//
//    }
//    else
//    {
//        printf("Return granParent->parent\n");
//        return grandParentNode->parent;
//    }
//
//
//}
//void checkInsertion(Node *root)
//{
//    grandParent(root);
//    uncle(root);
//}
//void printRBTRoot(Node *root)
//{
//    if(root != NULL) {
//        if (root->RBTRoot != NULL) {
//            printTreeValue(root->RBTRoot->color);
//            printTreeValue(root->RBTRoot->value);
//        }
//    }
//}
//void printInsertNode(Node *root)
//{
//    if(root != NULL) {
//        if (root->insertNode != NULL) {
//            printTreeValue(root->insertNode->color);
//            printTreeValue(root->insertNode->value);
//        }
//    }
//}
//printRBTRoot(root);
//printGrandParent(root);
//printInsertNode(root);
//void printGrandParent(Node *root)
//{
//    if(root != NULL) {
//        if (root->grandParent != NULL) {
//            printTreeValue(root->left->color);
//            printTreeValue(root->grandParent->value);
//        }
//    }
//
// This function creates a red node with the parameters passed in
// Returns a fully initialized Red node that is ready to be inserted into the Tree
//Node* createNode(int value)
//{
//    // Need a pointer to a Node
//    Node* newNode = NULL;
//
//    // Malloc space for new node
//    newNode = malloc(sizeof(Node));
//
//    // fill struct members
//    newNode->Color = RED;
//    newNode->value = value;
//    newNode->left  = NULL;
//    newNode->right = NULL;
//    newNode->parent = NULL;
//
//    // return the newly created node
//    return newNode;
//}
//
//Node *insertNode(Node *treeRootNode, int value)
//{
//    mainRedBlackTree = (Node *)malloc(sizeof(Node));
//    mainRedBlackTree->left = (Node *)malloc(sizeof(Node));
//    mainRedBlackTree->right = (Node *)malloc(sizeof(Node));
//    mainRedBlackTree->left = NULL;
//    mainRedBlackTree->right = NULL;
//    mainRedBlackTree->value = 0;
//    mainRedBlackTree->Color = EMPTY;
//    mainRedBlackTree->parent = NULL;
//
//    treeRootNode = createNode(value);
//
//
//    if(mainRedBlackTree == NULL)
//    {
//        treeRootNode->color = BLACK;
//        mainRedBlackTree = treeRootNode;
//        return treeRootNode;
//    }
//
//
//    else if(value < mainRedBlackTree->)
//    {
//        mainRedBlackTree->left = insertNode(mainRedBlackTree->left, value);
//        mainRedBlackTree->left = treeRootNode;
//        return treeRootNode;
//    }
//    else if(value > mainRedBlackTree->left->value)
//    {
//        mainRedBlackTree->right = insertNode(mainRedBlackTree->right, value);
//        mainRedBlackTree->right = treeRootNode;
//        return treeRootNode;
//
//    }
//    else
//    {
//        printf("%d already presenti n the tree\n", value);
//    }
//    return treeRootNode;
//}
//
//void printTreeValue(int value)
//{
//    printf("%d\n", value);
//}
//
//void printNode(Node *root)
//{
//    if(root != NULL)
//    {
//        printNode(root->left);
//        printTreeValue(root->color);
//        printTreeValue(root->value);
//        printNode(root->right);
//    }
//}
//
//
//




void RBInsertFixUp(Node *root)
{
    printf("Insertion went well");
}


Node *getMainRedBlackTree()
{
    return mainRBTree;
}

void RBInsertFixUp(Node *root)
{
    printf("Insertion went well");
}


Node *getMainRedBlackTree()
{
    return mainRBTree;
}

Node *insertNode(Node *treeRoot, Node *insertNode)
{
    // Check if the tree is NULL
    if(mainRBTree == NULL)
    {
        // If the tree is NULL add the data to tree
        mainRBTree = createNode(data);
    }
    else {
        int is_left = 0;
        int compareValue = 0;
        insertNode = mainRBTree;
        Node *prev = NULL;

        while (insertNode != NULL)
        {
            compareValue = compare(data, insertNode->value);

            prev = insertNode;

            if (compareValue < 0)
            {
                is_left = 1;
                insertNode = insertNode->left;

            }

            else if (compareValue > 0)
            {
                is_left = 0;
                insertNode = insertNode->right;

            }
        }

        if (is_left)
        {
            prev->left = createNode(data);


        }
        else
        {
            prev->right = createNode(data);
        }

    }
    return mainRBTree;
}